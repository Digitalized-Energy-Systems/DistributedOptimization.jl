var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Express","page":"API","title":"Express","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This part contains basic convenience functions for creating and running Mango.jl simulations. ","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"express/api.jl\"]","category":"page"},{"location":"api/#Agent-and-Roles","page":"API","title":"Agent and Roles","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Here, the API for the agent structs created with @agent/@role is listed. ","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"agent/api.jl\", \"agent/core.jl\", \"agent/role.jl\", \"agent/services.jl\"]\nOrder = [:macro, :function, :constant, :type, :module]","category":"page"},{"location":"api/#Real-time-container","page":"API","title":"Real time container","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This part contains the API related to the container construction, access and management.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"container/api.jl\", \"container/core.jl\", \"container/mqtt.jl\", \"container/protocol.jl\", \"container/tcp.jl\"]","category":"page"},{"location":"api/#Simulation","page":"API","title":"Simulation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following the APIs regarding the simulation world are listed.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"simulation/container.jl\", \"simulation/communication.jl\", \"simulation/tasks.jl\", \"simulation/world.jl\"]","category":"page"},{"location":"api/#Simulation-Environment","page":"API","title":"Simulation Environment","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following the APIs regarding the simulation environment are listed.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"environment/api.jl\", \"environment/core.jl\"]","category":"page"},{"location":"api/#Scheduling","page":"API","title":"Scheduling","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following the APIs for scheduling TaskData is listed.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"util/scheduling.jl\"]","category":"page"},{"location":"api/#Topology","page":"API","title":"Topology","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following the APIs for creating, aplying and using topologies is listed.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"util/topology.jl\"]","category":"page"},{"location":"api/#Encoding/Decoding","page":"API","title":"Encoding/Decoding","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following the built-in functions for encoding and decoding messages are listed.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"util/encode_decode.jl\"]","category":"page"},{"location":"api/#Misc","page":"API","title":"Misc","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Mango]\nPrivate = false\nPages = [\"util/datastructures_util.jl\"]","category":"page"},{"location":"getting_started/#Using-the-sharing-ADMM-with-flex-actors-(e.g.-for-resource-optimization)-with-Mango.jl","page":"Getting Started","title":"Using the sharing ADMM with flex actors (e.g. for resource optimization) with Mango.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Mango\nusing DistributedResourceOptimization\n\n@role struct HandleOptimizationResultRole\n    got_it::Bool = false\nend\n\nfunction Mango.handle_message(role::HandleOptimizationResultRole, message::OptimizationFinishedMessage, meta::Any)\n    role.got_it = true\nend\n\ncontainer = create_tcp_container(\"127.0.0.1\", 5555)\n\n# create participant models\nflex_actor = create_admm_flex_actor_one_to_many(10, [0.1, 0.5, -1])\nflex_actor2 = create_admm_flex_actor_one_to_many(15, [0.1, 0.5, -1])\nflex_actor3 = create_admm_flex_actor_one_to_many(10, [0.1, 0.5, -1])\n\n# create coordinator with objective\ncoordinator = create_sharing_target_distance_admm_coordinator()\n\n# create roles to integrate admm in Mango.jl\ndor = DistributedOptimizationRole(flex_actor, tid=:custom)\ndor2 = DistributedOptimizationRole(flex_actor2, tid=:custom)\ndor3 = DistributedOptimizationRole(flex_actor3, tid=:custom)\ncoord_role = CoordinatorRole(coordinator, tid=:custom, include_self=true)\n\n# role to handle a result\nhandle = HandleOptimizationResultRole()\nhandle2 = HandleOptimizationResultRole()\nhandle3 = HandleOptimizationResultRole()\n\n# create agents\nadd_agent_composed_of(container, dor, handle)\nc = add_agent_composed_of(container, dor2, handle2)\nca = add_agent_composed_of(container, coord_role, dor3, handle3)\n\n# create a topology of the agents\nauto_assign!(complete_topology(3, tid=:custom), container)\n\n# run the simulation with start message and wait for result\nactivate(container) do\n    wait(send_message(c, StartCoordinatedDistributedOptimization(create_admm_start(create_admm_sharing_data([0.2, 1, -2]))), address(ca)))\n    wait(coord_role.task)\nend","category":"page"},{"location":"getting_started/#Using-COHDA-with-Mango.jl","page":"Getting Started","title":"Using COHDA with Mango.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Mango\nusing DistributedResourceOptimization\n\ncontainer = create_tcp_container(\"127.0.0.1\", 5555)\n\n# create agents with local model wrapped in the general distributed optimization role\nagent_one = add_agent_composed_of(container, DistributedOptimizationRole(\n    create_cohda_participant(1, [[0.0, 1, 2], [1, 2, 3]])))\nagent_two = add_agent_composed_of(container, DistributedOptimizationRole(\n    create_cohda_participant(2, [[0.0, 1, 2], [1, 2, 3]])))\n\n# create start message\ninitial_message = create_cohda_start_message([1.2, 2, 3])\n\n# create topology\nauto_assign!(complete_topology(2), container)\n\n# run simulation\nactivate(container) do\n    send_message(agent_one, initial_message, address(agent_two))\nend","category":"page"},{"location":"#Distributed-Resource-Optimization-for-Julia","page":"Home","title":"Distributed Resource Optimization for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package DistributedResourceOptimization.jl (DRO) aims to provide a collection of distributed optimization algorithms for optimizing distributed resources. The algorithms are implemented without considering one special communication technique or package. DRO provides abstract types and function interfaces to implement so-called carriers, which are able to execute the distributed algorithms asynchronous. All algorithms can also be used without carrier using fitting @spawn or @async statements.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently there are three tested algorithms:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ADMM multi-value consensus such that the sum of all resp values equals a target vector\nADMM sharing variant on flexibility providing resources\nCOHDA, Combinatorial Optimization Heuristic for Distributed Agents, which minimizes the distance of schedule sums to a given target schedule","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is one carrier implemented:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mango.jl, agent framework for the simulation of distributed systems, DO provides roles to which the specific algorithms can be assigned to","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the package is highly work in progress. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, DRO is available on the general Julia registry, and can therfore be installed calling ]add DistributedResourceOptimization.","category":"page"}]
}
